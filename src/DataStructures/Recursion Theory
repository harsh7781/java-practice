What is Recursion?
Recursion is when a function calls itself. It's like standing between two mirrors‚Äîyour reflection keeps going forever! üîÅ

But in programming, recursion stops when a base condition is met.

Simple Example: Counting Down
Let‚Äôs say we want to count down from 5 to 1.

Using a Loop (No Recursion)

for (int i = 5; i > 0; i--) {
    System.out.println(i);
}

‚úÖ This works! But let‚Äôs try recursion instead.

Using Recursion

public class RecursionExample {
    public static void main(String[] args) {
        countDown(5); // Start counting down
    }

    public static void countDown(int n) {
        if (n == 0) { // Base condition (stopping point)
            return;
        }
        System.out.println(n);
        countDown(n - 1); // Recursively call function with a smaller value
    }
}
Output:
5
4
3
2
1
üéâ The function calls itself, reducing n each time until it reaches 0!


Understanding Recursion with a Stack üèóÔ∏è
Each function call is pushed onto a stack, and when the base case is reached, they start returning one by one.

Call Stack (Top to Bottom)
countDown(1)
countDown(2)
countDown(3)
countDown(4)
countDown(5)
Once n == 0, the function stops and each call returns.

Factorial Using Recursion
Factorial of n is n * (n-1) * (n-2) * ... * 1.

Example: Factorial of 5

5! = 5 √ó 4 √ó 3 √ó 2 √ó 1 = 120


Recursive Java Code

public class FactorialRecursion {
    public static void main(String[] args) {
        int result = factorial(5); // Compute 5!
        System.out.println("Factorial: " + result);
    }

    public static int factorial(int n) {
        if (n == 1) { // Base condition
            return 1;
        }
        return n * factorial(n - 1); // Recursive call
    }
}


How It Works

factorial(5) ‚Üí 5 √ó factorial(4)
factorial(4) ‚Üí 4 √ó factorial(3)
factorial(3) ‚Üí 3 √ó factorial(2)
factorial(2) ‚Üí 2 √ó factorial(1)
factorial(1) ‚Üí 1  (Base Case)
‚úÖ Final Result: 5 √ó 4 √ó 3 √ó 2 √ó 1 = 120

Fibonacci Using Recursion
The Fibonacci sequence is:

0, 1, 1, 2, 3, 5, 8, 13...
Each number is the sum of the previous two:
fib(n) = fib(n-1) + fib(n-2)

Recursive Java Code

public class FibonacciRecursion {
    public static void main(String[] args) {
        int n = 6; // Find 6th Fibonacci number
        System.out.println("Fibonacci number: " + fibonacci(n));
    }

    public static int fibonacci(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}


How It Works

fibonacci(6) = fibonacci(5) + fibonacci(4)
fibonacci(5) = fibonacci(4) + fibonacci(3)
fibonacci(4) = fibonacci(3) + fibonacci(2)
...
üîπ This is not efficient because it recalculates values.
üîπ Better approach? Use Memoization (Dynamic Programming) to store results.

When to Use Recursion?
‚úÖ When the problem can be broken down into smaller subproblems.
‚úÖ When using loops is complicated.
‚úÖ When solving problems like tree traversal, backtracking, and divide & conquer.

When NOT to Use Recursion?
‚ùå When the function creates too many recursive calls (Stack Overflow Error).
‚ùå When loops are simpler and faster (like iterating through an array).
‚ùå When performance is critical (use iterative approaches where possible).

Final Thought üí≠
Recursion is like breaking a big task into smaller tasks until it becomes super easy! üß†

üöÄ Remember:

Always define a base condition (to stop infinite recursion).
Be careful of Stack Overflow Errors for deep recursion.
Use Memoization for optimizing recursive problems.