What is Binary Search?
Imagine you have a phone book with 1,000 names sorted alphabetically.
If you want to find a name, do you start from the first page and check one by one? ❌ No! That would be too slow!

Instead, you open the book in the middle, check the name, and decide whether to search in the left half or the right half.
This way, you divide the search space by half every time. 📖🔍

That’s exactly how Binary Search works! 🚀

How Binary Search Works (Step-by-Step)
Let's say we have this sorted list of numbers:
[2, 5, 8, 12, 16, 23, 38, 56, 72, 91]
We need to find 23.

Step 1: Find the Middle Element
Middle index = (start + end) / 2

Start = 0, End = 9
Middle = (0 + 9) / 2 = 4
Middle element = 16
2	5	8	12	16	23	38	56	72	91
0	1	2	3	4	5	6	7	8	9
🔹 23 is greater than 16 → Search in right half (index 5 to 9).

Step 2: Find the Middle Element of the Right Half
Start = 5, End = 9
Middle = (5 + 9) / 2 = 7
Middle element = 56
23	38	56	72	91
5	6	7	8	9
🔹 23 is smaller than 56 → Search in left half (index 5 to 6).

Step 3: Find the Middle Element of the New Left Half
Start = 5, End = 6
Middle = (5 + 6) / 2 = 5
Middle element = 23 ✅
🎉 Element found at index 5! 🎉

Time Complexity of Binary Search
Case	        Time Complexity
-----------     ------------------------------------------------------------------
Best Case	    O(1) (Element found at the first guess)
Average Case	O(log n) (Each step reduces the search space by half)
Worst Case	    O(log n) (We keep dividing until we reach the last element)

🚀 Why is it so fast? Because it reduces the search space by half each time instead of checking every element like Linear Search (O(n)).

Key Takeaways
✅ Fast Searching Algorithm (O(log n) is way better than O(n))
✅ Only Works on Sorted Arrays
✅ Much Faster than Linear Search for Large Data